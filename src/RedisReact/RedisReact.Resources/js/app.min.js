var jsonviewer = (function() {
    var doc = document, win = window,
        $$ = function(sel) { return doc.getElementsByTagName(sel); },
        $each = function(fn) { for (var i=0,len=this.length; i<len; i++) fn(i, this[i], this); },
        isIE = /msie/i.test(navigator.userAgent) && !/opera/i.test(navigator.userAgent);

    each = function(arr, fn) { $each.call(arr, fn); };

    var splitCase = function (t) { return t; }, //typeof t != 'string' ? t : t.replace(/([A-Z]|[0-9]+)/g, ' $1')
        uniqueKeys = function(m){ var h={}; for (var i=0,len=m.length; i<len; i++) for (var k in m[i]) if (show(k)) h[k] = k; return h; },
        keys = function(o){ var a=[]; for (var k in o) if (show(k)) a.push(k); return a; }
    var tbls = [];

    var valueFmt = function(k, v, vFmt) {
        return vFmt;
    };

    function val(m, valueFn) {
        if (valueFn)
            valueFmt = valueFn;
        if (m == null) return '';
        if (typeof m == 'number') return num(m);
        if (typeof m == 'string') return str(m);
        if (typeof m == 'boolean') return m ? 'true' : 'false';
        return m.length ? arr(m) : obj(m);
    }
    function num(m) { return m; }
    function strFact(showFullDate){

        function shortDate(m){
            return m.substr(0,6) == '/Date(' ? dmft(date(m)) : m;
        }

        function fullDate(m){
            return m.substr(0,6) == '/Date(' ? dmfthm(date(m)) : m;
        }
        return showFullDate ? fullDate : shortDate;  
    }
    str = strFact(location.hash.indexOf('show=') != -1 && location.hash.indexOf('fulldates') != -1);
    function date(s) { return new Date(parseFloat(/Date\(([^)]+)\)/.exec(s)[1])); }
    function pad(d) { return d < 10 ? '0'+d : d; }
    function dmft(d) { return d.getFullYear() + '/' + pad(d.getMonth() + 1) + '/' + pad(d.getDate()); }
    function dmfthm(d) { return d.getFullYear() + '/' + pad(d.getMonth() + 1) + '/' + pad(d.getDate()) + ' ' + pad(d.getHours()) + ":" + pad(d.getMinutes()); }
    function show(k) { return typeof k != 'string' || k.substr(0,2) != '__'; }
    function obj(m) {
        var sb = '<dl>';
        for (var k in m) if (show(k)) sb += '<dt class="ib">' + splitCase(k) + '</dt><dd>' + valueFmt(k, m[k], val(m[k])) + '</dd>';
        sb += '</dl>';
        return sb;
    }
    function arr(m) {
        if (typeof m[0] == 'string' || typeof m[0] == 'number') return m.join(', ');
        var id=tbls.length, h=uniqueKeys(m);
        var sb = '<table id="tbl-' + id + '" class="table table-striped"><caption></caption><thead><tr>';
        tbls.push(m);
        var i=0;
        for (var k in h) sb += '<th id="h-' + id + '-' + (i++) + '"><b></b>' + splitCase(k) + '</th>';
        sb += '</tr></thead><tbody>' + makeRows(h,m) + '</tbody></table>';
        return sb;
    }
    function makeRows(h,m) {
        var sb = '';
        for (var r=0,len=m.length; r<len; r++) {
            sb += '<tr>';
            var row = m[r];
            for (var k in h) {
                if (show(k))
                    sb += '<td>' + valueFmt(k, row[k], val(row[k])) + '</td>';
            }
            sb += '</tr>';
        }  
        return sb;
    }

    doc.onclick = function(e) {
        e = e || window.event, el = e.target || e.srcElement, cls = el.className;
        if (el.tagName == 'B') el = el.parentNode;
        if (el.tagName != 'TH') return;
        el.className = cls == 'asc' ? 'desc' : (cls == 'desc' ? null : 'asc');
        each($$('TH'), function(i,th){ if (th == el) return; th.className = null; });
        clearSel();
        var ids=el.id.split('-'), tId=ids[1], cId=ids[2];
        if (!tbls[tId]) return;
        var tbl=tbls[tId].slice(0), h=uniqueKeys(tbl), col=keys(h)[cId], tbody=el.parentNode.parentNode.nextSibling;
        if (!el.className){ setTableBody(tbody, makeRows(h,tbls[tId])); return; }
        var d=el.className=='asc'?1:-1;
        tbl.sort(function(a,b){ return cmp(a[col],b[col]) * d; });
        setTableBody(tbody, makeRows(h,tbl));
    }

    function setTableBody(tbody, html) {
        if (!isIE) { tbody.innerHTML = html; return; }
        var temp = tbody.ownerDocument.createElement('div');
        temp.innerHTML = '<table>' + html + '</table>';
        tbody.parentNode.replaceChild(temp.firstChild.firstChild, tbody);
    }

    function clearSel() {
        if (doc.selection && doc.selection.empty) doc.selection.empty();
        else if(win.getSelection) {
            var sel=win.getSelection();
            if (sel && sel.removeAllRanges) sel.removeAllRanges();
        }
    }

    function cmp(v1, v2){
        var f1, f2, f1=parseFloat(v1), f2=parseFloat(v2);
        if (!isNaN(f1) && !isNaN(f2)) v1=f1, v2=f2;
        if (typeof v1 == 'string' && v1.substr(0,6) == '/Date(') v1=date(v1), v2=date(v2);
        if (v1 == v2) return 0;
        return v1 > v2 ? 1 : -1;
    }

    return val;

})(window);
function findPotentialKeys(o) {
    var keys = [];
    if (typeof o == 'object') {
        for (var k in o) {
            if (k.length > 2 && k.endsWith('Id') && k.indexOf("'") == -1) {
                var v = o[k];
                var ref = "urn:" + k.substring(0, k.length - 2).toLowerCase() + ":" + v;
                keys.push(ref);
            }
        }
    }
    return keys;
}

function isJsonObject(s) {
    if (typeof s != 'string')
        return false;

    var isComplexJson = s.indexOf('{') >= 0 || s.indexOf('[') >= 0;
    return isComplexJson;
}

function hasTextSelected() {
    return !!window.getSelection && window.getSelection().toString();
}

function selectText(el) {
    if (!window.getSelection) return;
    var range = document.createRange();
    range.selectNode(el);
    window.getSelection().addRange(range);
}

//from jsonviewer
function date(s) { return new Date(parseFloat(/Date\(([^)]+)\)/.exec(s)[1])); }
function pad(d) { return d < 10 ? '0' + d : d; }
function dmft(d) { return d.getFullYear() + '/' + pad(d.getMonth() + 1) + '/' + pad(d.getDate()); }
function valueFmt(v) {
    if (typeof v != "string")
        return v;

    var s = v.startsWith('/Date(') ? dmft(date(v)) : v;
    return s;
}

var Redis = bindAll({
    call: function (args) {
        var request = {
            args: args
        };
        return $.ajax({
            url: "/call-redis",
            method: "POST",
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify(request)
        });
    },
    execCommandString: function (cmd) {
        var $this = this;
        var args = this.parseCommandString(cmd);
        return Redis.call(args)
            .then(function (r) {
                return $this.toObject(r.result);
            });
    },
    toObject: function (r) {
        if (!r)
            return null;

        if (r.children && r.children.length > 0) {
            var to = [];
            for (var i = 0, len = r.children.length; i < len; i++) {
                var child = r.children[i];
                var value = child.text || this.toObject(child.children);
                to.push(value);
            }
            return to;
        }
        return r.text;
    },
    parseCommandString: function(cmd) {
        var args = [];
        var lastPos = 0;
        for (var i = 0; i < cmd.length; i++) {
            var c = cmd[i];
            if (c == "{" || c == "[") { 
                break; //stop splitting args if value is complex type
            }
            if (c == " ") {
                var arg = cmd.substring(lastPos, i);
                args.push(arg);
                lastPos = i + 1;
            }
        }
        args.push(cmd.substring(lastPos));
        return args;
    },
    getConnection: function () {
        return $.ajax({
            url: "/connection",
            dataType: "json"
        });
    },
    search: function (query) {
        var $this = this;
        return $.ajax({
            url: "/search-redis",
            dataType: "json",
            data: { query: query }
        })
        .then(function (r) {
            return $this.searchCache[query] = r;
        });
    },
    searchCache: {},
    cachedSearch: function (query) {
        if (this.searchCache[query]) {
            var deferred = $.Deferred();
            deferred.resolve(this.searchCache[query]);
            return deferred.promise();
        }
        var $this = this;
        return this.search(query)
            .then(function (r) {
                return $this.searchCache[query] = r;
            });
    },
    getStringValues: function (keys) {
        var args = keys.slice(0);
        args.unshift('MGET');
        return this.call(args)
            .then(function (r) {
                var to = {};
                for (var i = 0; i < keys.length; i++) {
                    to[keys[i]] = r.result.children[i].text;
                }
                return to;
            });
    },
    exists: function (keys) {
        return this.getStringValues(keys)
            .then(function (r) {
                var to = {};
                for (var k in r) {
                    to[k] = !!r[k];
                }
                return to;
            });
    },
    info: function () {
        return this.call(['INFO'])
            .then(function (r) {
                var s = r.result.text;

                var to = {}, o = {}, lines = s.split('\n');
                lines.forEach(function (line) {
                    if (!line.trim())
                        return;
                    if (line.startsWith("# ")) {
                        var group = line.substring(2);
                        to[group] = o = {};
                    } else {
                        var parts = $.ss.splitOnFirst(line, ':');
                        o[parts[0]] = parts[1];
                    }
                });

                return to;
            });
    },
    getString: function (key) {
        return this.call(['GET', key])
            .then(function (r) {
                var s = r.result.text;
                return s;
            });
    },
    getAllItemsFromList: function (key) {
        var $this = this;
        return this.call(['LRANGE', key, '0', '-1'])
            .then(function (r) {
                return $this.asList(r);
            });
    },
    getAllItemsFromSet: function (key) {
        var $this = this;
        return this.call(['SMEMBERS', key])
            .then(function (r) {
                return $this.asList(r);
            });
    },
    getAllItemsFromSortedSet: function (key) {
        var $this = this;
        return this.call(['ZRANGE', key, '0', '-1', 'WITHSCORES'])
            .then(function (r) {
                return $this.asKeyValues(r);
            });
    },
    getAllItemsFromHash: function (key) {
        var $this = this;
        return this.call(['HGETALL', key])
            .then(function (r) {
                return $this.asKeyValues(r);
            });
    },
    asList: function (r) {
        var children = r.result && r.result.children || [];
        var to = children.map(function (x) {
            return x.text;
        });
        return to;
    },
    asKeyValues: function (r) {
        var list = this.asList(r);
        var to = {};
        for (var i = 0; i < list.length; i += 2) {
            var key = list[i];
            var val = list[i + 1];
            to[key] = val;
        }
        return to;
    }
});

function bindAll(o) {
    Object.keys(o).forEach(function (k) {
        if (typeof o[k] == 'function')
            o[k] = o[k].bind(o);
    });
    return o;
}
var Router = ReactRouter;

var DefaultRoute = Router.DefaultRoute;
var Link = Router.Link;
var Route = Router.Route;
var RouteHandler = Router.RouteHandler;

var Actions = Reflux.createActions([
    'viewInfo',
    'loadConnection',
    'search',
    'loadKey',
    'loadRelatedKeyInfo',
    'setConsole',
    'logEntry',
    'clearLogs',
    'addToHistory',
    'nextHistory'
]);

var SEPARATORS = [':', '.', '/'];
var Keys = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    T: 84
};

var DebugLogMixin = {
    componentWillUpdate: function(nextProps, nextState){
        //console.log("componentWillUpdate:", nextProps, nextState);
    }    
};

var SettingsStore = Reflux.createStore({
    init: function () {
        this.appRawMode = false;
        document.addEventListener('keyup', this.globalKeyUp);
    },
    notify: function() {
        this.trigger({ appRawMode: this.appRawMode });
    },
    globalKeyUp: function (e) {
        if (e.target && e.target.type == "text")
            return;

        var shortcutKeys = [Keys.T];
        if (e.altKey || e.ctrlKey || shortcutKeys.indexOf(e.which) == -1)
            return;

        if (e.which == Keys.T) {
            this.appRawMode = !this.appRawMode;
            this.notify();
        }
    }
});

var SearchStore = Reflux.createStore({
    init: function () {
        this.listenTo(Actions.search, this.search);
        this.text = null;
        this.query = null;
        this.results = [];
    },
    search: function (searchText) {
        var $this = this;
        this.text = searchText;
        this.query = this.text || "*";

        var patternChars = ['*', '?', '[', ']'];
        var hasPattern = patternChars.some(function (c) {
            return $this.query.indexOf(c) >= 0;
        });

        if (this.query.endsWith('$')) {
            this.query = this.query.substring(0, this.query.length - 1);
            hasPattern = true;
        }

        if (!hasPattern)
            this.query += "*";

        Redis.search(this.query)
            .done(function (r) {
                if ($this.text != searchText) 
                    return;
                
                $this.results = r.results || [];
                $this.trigger({text: $this.text, query: $this.query, results: $this.results});
            });
    }
});

var InfoStore = Reflux.createStore({
    init: function () {
        this.listenTo(Actions.viewInfo, this.viewInfo);
        this.info = null;
    },
    viewInfo: function () {
        var $this = this;
        Redis.info()
            .done(function (r) {
                $this.trigger($this.info = r);
            });
    }
});

var ConnectionStore = Reflux.createStore({
    init: function () {
        this.listenTo(Actions.loadConnection, this.loadConnection);
        this.connection = null;
    },
    loadConnection: function () {
        var $this = this;
        Redis.getConnection()
            .done(function (r) {
                $this.trigger($this.connection = r);
            });
    }
});

var KeyStore = Reflux.createStore({
    init: function() {
        this.listenTo(Actions.loadKey, this.loadKey);
        this.listenTo(Actions.loadRelatedKeyInfo, this.loadRelatedKeyInfo);
        this.cache = {};
    },
    loadKey: function(id, type) {
        if (this.cache[id]) {
            this.trigger(this.cache[id]);
        }

        var $this = this;
        if (type == 'string') {
            Redis.getString(id)
                .done(function(r) {
                    $this.loadRelatedKeyInfo($this.cache[id] = { id: id, type: type, value: r });
                });
        } else if (type == 'list') {
            Redis.getAllItemsFromList(id)
                .done(function(r) {
                    $this.loadRelatedKeyInfo($this.cache[id] = { id: id, type: type, value: r });
                });
        } else if (type == 'set') {
            Redis.getAllItemsFromSet(id)
                .done(function(r) {
                    $this.loadRelatedKeyInfo($this.cache[id] = { id: id, type: type, value: r });
                });
        } else if (type == 'zset') {
            Redis.getAllItemsFromSortedSet(id)
                .done(function(r) {
                    $this.loadRelatedKeyInfo($this.cache[id] = { id: id, type: type, value: r });
                });
        } else if (type == 'hash') {
            Redis.getAllItemsFromHash(id)
                .done(function(r) {
                    $this.loadRelatedKeyInfo($this.cache[id] = { id: id, type: type, value: r });
                });
        }
    },
    loadRelatedKeyInfo: function(result) {
        var $this = this;

        var q = SearchStore.query;
        var id = result.id;
        var lastSep = Math.max.apply(null, SEPARATORS.map(function (x) {
            return id.lastIndexOf(x);
        }));
        result.query = lastSep >= 0
            ? id.substring(0, lastSep + 1) + '*'
            : q & q != "*" ? q : null;

        //Minimizing re-rendering till end reduces page jitter + increases perceived perf
        var count = 0;
        var trigger = function() {
            if (--count <= 0)
                $this.trigger(result);
        };

        if (isJsonObject(result.value)) {
            try {
                var o = JSON.parse(result.value);
                var refKeys = findPotentialKeys(o);
                if (refKeys.length > 0) {
                    count++;
                    Redis.getStringValues(refKeys)
                        .done(function(r) {
                            result.relatedKeys = r;
                            trigger();
                        });
                }
            } catch (e){}
        }

        if (result.query) {
            count++;
            Redis.cachedSearch(result.query)
                .done(function(r) {
                    result.similarKeys = r.results;
                    trigger();
                });
        }

        if (count == 0)
            trigger();
    }
});

var ConsoleStore = Reflux.createStore({
    init: function () {
        this.listenToMany(Actions);
        this.id = 0;
        this.command = null;
        this.logs = [];
        this.history = [];
        this.historyIndex = -1;
    },
    notify: function() {
        this.trigger({
            command: this.command,
            logs: this.logs,
            history: this.history,
            historyIndex: this.historyIndex
        });
    },
    addToHistory: function(cmd) {
        if (cmd != this.history[this.history.length - 1]) {
            this.history.push(cmd);
            this.historyIndex = this.history.length;
            this.notify();
        }
    },
    nextHistory: function(i) {
        var next = this.historyIndex + i;
        this.historyIndex = Math.max(Math.min(next, this.history.length), 0);
        this.command = this.history[this.historyIndex];
        this.notify();
    },
    clearLogs: function() {
        this.logs = [];
        this.notify();
    },
    logEntry: function(entry) {
        entry.id = ++this.id;
        this.logs.push(entry);
        this.command = null;
        this.notify();
    },
    setConsole: function(cmd) {
        this.command = cmd;
        this.notify();
    }
});
